<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <help_text>&lt;diagram program="umletino" version="14.4.0-SNAPSHOT"&gt;&lt;zoom_level&gt;10&lt;/zoom_level&gt;&lt;element&gt;&lt;id&gt;Relation&lt;/id&gt;&lt;coordinates&gt;&lt;x&gt;10&lt;/x&gt;&lt;y&gt;440&lt;/y&gt;&lt;w&gt;190&lt;/w&gt;&lt;h&gt;30&lt;/h&gt;&lt;/coordinates&gt;&lt;panel_attributes&gt;lt=&amp;lt;&amp;lt;&amp;lt;&amp;lt;-&lt;/panel_attributes&gt;&lt;additional_attributes&gt;10;10;170;10&lt;/additional_attributes&gt;&lt;/element&gt;&lt;/diagram&gt;Space for diagram notesstd::uint32_tstd::mutexstd::unordered_map&lt;DM1_SRC, std::vector&lt;DM1_SPN&gt;</help_text>
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>372</x>
      <y>0</y>
      <w>336</w>
      <h>1344</h>
    </coordinates>
    <panel_attributes>CollectionService
--
-m_flags: SMLK_UINT32
-m_internal_flags: SMLK_UINT32
-m_timer_flags: SMLK_UINT32
-m_sqldb:DaqSqlDB
-m_sql_mutex: std::mutex
-m_dismantle_tbox_status: SMLK_UINT32
-m_report_period_emergency: SMLK_UINT32
-m_report_period: SMLK_UINT32
-m_seq: SMLK_UINT32
-m_bucket_num_1s: SMLK_UINT32
-m_bucket_num_30s: SMLK_UINT32
-m_wakeup_report_cnt: SMLK_UINT32
-m_wakeup_report_period: SMLK_UINT32
-m_trigger_period_30s: SMLK_UINT32
-m_trigger_period_1s_ms: SMLK_UINT32
-m_time_source: SMLK_UINT32
-m_timeSyncGap_ms: std::int64_t
-m_time_sync_flags: SMLK_UINT32
-m_upload_period_1s_ms: SMLK_UINT32
-m_statistics_report_period: SMLK_UINT32
-m_statistics_store_period: SMLK_UINT32
-i_lckcar_sts: SMLK_UINT8
-m_door_signal_status: SMLK_UINT8
-m_collect_last_frame_flag: SMLK_UINT32
-m_clock_id: std::string
-m_mutex: std::mutex
-m_thread: std::thread
-m_dm1_thread: std::thread
-m_compress_mutex: std::mutex
-m_compress_thread: std::thread
-m_simulator_thread: std::thread
-m_timer: Timer
-m_0f3c_timer: Timer
-m_0f3b_timer: Timer
-m_0f3b_30s_timer: Timer
-m_0200_timer: Timer
-m_dm1_timeout_timer: Timer
-m_timer_shared: Timer
-m_frequency_value: std::unordered_map&lt;SMLK_UINT32, SMLK_UINT32&amp;&gt;
-m_events：Queue&lt;CallableEvent&gt;
-m_dm1_events: Queue&lt;CallableEvent&gt;
-m_compress_events:
-Queue&lt;CallableEvent&gt;:
-m_protocols: std::vector&lt;SMLK_UINT8&gt;
-m_protocol_messages: std::unordered_map&lt;SMLK_UINT8, ProtocolMessage&gt;
-m_cached_tires: std::unordered_map&lt;SMLK_UINT8, std::shared_ptr&lt;IMessage&gt;&gt;
-m_cached_signals: std::unordered_map&lt;vehicle::SignalID, vehicle::SignalVariant&gt;
-m_cached_index_signals: std::unordered_map&lt;SMLK_UINT32, vehicle::SignalVariant &amp;&gt;
-m_cached_tires_signals: std::unordered_map&lt;SMLK_UINT32, vehicle::SignalVariant &amp;&gt;
-m_cached_tires_ext_signals: std::unordered_map&lt;SMLK_UINT32, vehicle::SignalVariant &amp;&gt;
-g_dm1_data_pool: std::unordered_map&lt;SMLK_UINT32, DM1DataInfo&gt;
-g_dm1_data_pool_mutex: std::mutex
-g_dm1_trip_uploaded_mutex: std::mutex
-m_dm1_src_all_spn_map:
-m_actived_dm1: std::set&lt;SMLK_UINT32&gt;
-m_trip_uploaded_spn: std::set&lt;SMLK_UINT32&gt;
-m_cached_signals_pool: FixedQueue
-m_cached_ap_positions: FixedQueue
-m_pending_events: std::unordered_map&lt;SMLK_UINT8, std::unordered_map&lt;SMLK_UINT32, std::shared_ptr&lt;IMessage&gt;&gt;&gt;
--
+ Init(): SMLK_UINT32
+Start(): SMLK_UINT32
+Stop(): void
+IsRunning(): bool const
+Post(IN MsgHead &amp;head, IN SMLK_UINT8 *ptr, IN std::size_t sz): void
+Post(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
+Post(IN MsgHead &amp;head, INOUT std::vector&lt;SMLK_UINT8&gt; &amp;&amp;data): void
+PostDM1(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
+PostDM1(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;&amp;data): void
+PostDM1(IN MsgHead &amp;head, IN SMLK_UINT8 *data, IN std::size_t sz):void
-HandleEvent(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data):void
-DM1HandleEvent(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8 &amp;data): void
-OnMessage(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnRequest(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnNotify(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnCompress(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnDataChanged(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnTireNotify(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnTimer(IN SMLK_UINT32 id, IN SMLK_UINT32 param): void
-InitTimerOutCheck(): void
-OnMcuNotify(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnLocation(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnSysPower(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnTelNotify(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnSystimeSync(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnSystimeReady(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnIgnOn(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnIgnOff(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnCanBusWakeup(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnCanBusSleep(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnDriveEvent(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnDM1Notify(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnCheckDataValidTimeout(): bool
-CheckWhetherTimeSync(): bool
-CheckWhetherInPeriodWakeup(): bool
-CheckSamplingCondition(): bool
-CheckLocationReportContidion(): bool
-Check1sReportContidion(): bool
-Check30sReportContidion(): bool
-ReadTimeSource(): void
-OnDriveEventSharpSlowdown(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnDriveEventSpeeding(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnDriveEventAccident(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnDriveEventTireWarn(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnDriveEventTirednessDriving(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnDriveEventLowSOC(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnDriveEventDMSWarn(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnDriveEventFuelTankWarn(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnDriveEventAgitatorFault(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnDriveEventDisMantleTbox(IN MsgHead &amp;head): void
-OnDriveEventGbCheckVinError(IN MsgHead &amp;head): void
-OnDriveEventRefrigeratorFailure(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnFaultEvent(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-OnFaultEventDM1(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data): void
-CompressPost(IN MsgHead &amp;head, INOUT std::vector&lt;SMLK_UINT8&gt; &amp;&amp;data): void
-HandleGbCheckVinResult(): void
-ReadNetWorkTypeConfig(): void
-ReadCarTypeConfig(): void
-CheckWireConnectStatus(SMLK_UINT8 nCheckItem): void
-HandleSampling1SCollectConfig(): void
-HandleSampling1SUploadConfig(): void
-HandleStatisticsConfig(): void
-HandleWakeupInterval(): void
-HandleFinaceLockStatus(): void
-OnUpdateJsonConfig(): void
-OnReadJsonConfig(): void
-SamplingPeriod1S(): void
-SamplingPeriod30S(): void
-SamplingLocation(): void
-CacheAllSignals(): void
-GetGNSS(): void
-ReportLocation(): void
-ReportStatistics(): void
-StoreStatistics(): void
-OnDayChanged(): void
-ClearCanDataType(): SMLK_UINT32
-CheckWhichCanDataStop(): bool
-SetAllCanSignalInvalid(SMLK_UINT8 netWorkType): void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>324</x>
      <y>576</y>
      <w>60</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>102</x>
      <y>552</y>
      <w>228</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
IMessage
--
--
+Encode(std::vector&lt;SMLK_UINT8&gt; &amp;): SMLK_UINT32
+Decode(IN std::vector&lt;SMLK_UINT8&gt; &amp;): SMLK_UINT32</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>324</x>
      <y>720</y>
      <w>60</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>666</y>
      <w>330</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>CallableEvent
--
-m_head: MsgHead
-m_data: std::vector&lt;SMLK_UINT8&gt;
-m_func: std::function&lt;void (IN MsgHead &amp;, IN std::vector&lt;SMLK_UINT8&gt; &amp;)&gt;
--
+CallableEvent(IN MsgHead &amp;head, IN SMLK_UINT8 *data, std::size_t sz, Func func)
+CallableEvent(IN MsgHead &amp;head, IN std::vector&lt;SMLK_UINT8&gt; &amp;data, Func func)
+CallableEvent(IN MsgHead &amp;head, std::vector&lt;SMLK_UINT8&gt; &amp;&amp;data, Func func)
+CallableEvent(IN CallableEvent &amp;other)
+operator=(IN CallableEvent &amp;other)
+operator()()：void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>108</x>
      <y>894</y>
      <w>126</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>MsgHead
--
-m_id: SMLK_UINT32
-m_seq: SMLK_UINT32
-m_protocol: SMLK_UINT32
-m_compress: SMLK_UINT32 
-m_length: SMLK_UINT32
-m_extra: SMLK_UINT32 
--
+MsgHead(SMLK_UINT32 id, SMLK_UINT32 seq, SMLK_UINT8 protocol, SMLK_UINT8 compress, SMLK_UINT16 length, SMLK_UINT32 extra)
+MsgHead(IN MsgHead &amp;)
+operator=(const MsgHead &amp;): MsgHead &amp;
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>162</x>
      <y>774</y>
      <w>18</w>
      <h>132</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;200.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>114</x>
      <y>1092</y>
      <w>234</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>template=T: Class
Queue
--
-m_queue: std::queue&lt;T&gt;
-m_mutex: mutable std::mutex
-m_condition: std::condition_variable
--
+put(IN T &amp;t)
+get(int timeout_ms = -1, bool *timeout_ptr = nullptr)
+operator bool()
+empty(): bool const
+size():std::size_t const</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>318</x>
      <y>1134</y>
      <w>66</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
